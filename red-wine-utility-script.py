{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8204,"sourceType":"datasetVersion","datasetId":4458}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\nimport numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import power_transform, StandardScaler\n\n\ndata = pd.read_csv('/kaggle/input/red-wine-quality-cortez-et-al-2009/winequality-red.csv')\ndata.rename(columns=dict(map(lambda name:(name,'_'.join(name.split(' '))), data.columns.to_list())), inplace=True)\nX = data.drop(columns=['quality'], axis=1)\ny = data.loc[:,'quality']\n\n\ndef split_outliers(df: pd.DataFrame, col:str):\n    q1,q3 = df[col].quantile(0.25), df[col].quantile(0.75)\n    iqr = q3-q1\n    upper_tail = q3 + 1.5*iqr\n    lower_tail = q1 - 1.5*iqr\n    upper = df[col]>upper_tail\n    lower = df[col]<lower_tail\n    outliers_mask = upper|lower\n    \n    outliers = df.loc[outliers_mask, col]\n    non_outliers = df.loc[~outliers_mask, col]\n    \n    return (outliers, non_outliers)\n\nclass PowerTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self, method='box-cox'):\n        self.method = method\n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X:pd.DataFrame):\n        X = X.copy()\n        for col in X.columns:\n            method = self.method\n            if sum(X[col]<=0)>0:\n                print(f'PowerTransformer: The column {col} contains non-positive values. Falling back to Yeo-Johnson Transform')\n                method='yeo-johnson'\n            X[col] = power_transform(X[[col]], method=method)\n        return X\n\nclass MeanTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self, trim=0.1):\n        self.trim = trim\n\n    def trimmed_mean(self, seq:np.array, trim=0.1):\n        ss = sorted(seq)\n        n = len(ss)\n        trim_cnt = int(trim*n)\n        return np.mean(ss[trim_cnt:-trim_cnt])\n    \n    def fit(self, X:pd.DataFrame, y=None):\n        self.impute_col = dict()\n        for col in X.columns:\n            outliers,non_outliers=split_outliers(X,col)\n            self.impute_col[col]=(outliers.index, self.trimmed_mean(non_outliers))\n        return self\n    def transform(self, X:pd.DataFrame):\n        X = X.copy()\n        for col in X.columns:\n            if col in self.impute_col:\n                idx,m=self.impute_col[col]\n                X.loc[idx,col]=m\n        return X\n\n    \n    \npower_transform_cols = [\n    'fixed_acidity',\n    'volatile_acidity',\n    'citric_acid',\n    'residual_sugar',\n    'alcohol'\n]\n\nmean_transform_cols = [\n    'chlorides',\n    'free_sulfur_dioxide',\n    'total_sulfur_dioxide',\n    'density',\n    'pH',\n    'sulphates'\n]\n\npreprocessor = ColumnTransformer(transformers=[\n    ('boxcox', PowerTransformer(), power_transform_cols),\n    ('mean', MeanTransformer(), mean_transform_cols)\n], remainder='passthrough')\n\npipeline = Pipeline(steps=[\n    ('preprocess', preprocessor),\n    ('scaling',StandardScaler())\n])\n\npipeline.fit_transform(X,y)","metadata":{"_uuid":"0b2c88bd-11bf-44f2-8921-5bb926e75a75","_cell_guid":"96da01ef-fc24-4b89-86da-ec2fb203e3b0","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-09-12T18:31:03.471226Z","iopub.execute_input":"2024-09-12T18:31:03.471746Z","iopub.status.idle":"2024-09-12T18:31:03.615119Z","shell.execute_reply.started":"2024-09-12T18:31:03.471698Z","shell.execute_reply":"2024-09-12T18:31:03.613508Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"PowerTransformer: The column citric_acid contains non-positive values. Falling back to Yeo-Johnson Transform\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"array([[-0.44131537,  0.98117359, -1.53110932, ...,  0.64874865,\n         1.4487826 , -0.64138882],\n       [-0.1608402 ,  1.77002342, -1.53110932, ...,  0.0399422 ,\n        -0.7829149 ,  0.3697198 ],\n       [-0.1608402 ,  1.25639205, -1.25535866, ...,  0.16170349,\n        -0.35097345,  0.11694264],\n       ...,\n       [-1.36257334,  0.00199569, -0.68329383, ..., -0.60539263,\n         0.80087042,  0.95953316],\n       [-1.76746944,  0.71615389, -0.74382636, ..., -0.76977037,\n         1.88072405,  0.62249695],\n       [-1.66203021, -1.30743403,  1.03107021, ..., -0.75759424,\n         0.5848997 ,  0.20120169]])"},"metadata":{}}]}]}