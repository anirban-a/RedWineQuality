{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8204,"sourceType":"datasetVersion","datasetId":4458}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\nimport numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import power_transform, StandardScaler\n\n\ndata = pd.read_csv('/kaggle/input/red-wine-quality-cortez-et-al-2009/winequality-red.csv')\ndata.rename(columns=dict(map(lambda name:(name,'_'.join(name.split(' '))), data.columns.to_list())), inplace=True)\nX = data.drop(columns=['quality'], axis=1)\ny = data.loc[:,'quality']\n\n\ndef split_outliers(df: pd.DataFrame, col:str):\n    q1,q3 = df[col].quantile(0.25), df[col].quantile(0.75)\n    iqr = q3-q1\n    upper_tail = q3 + 1.5*iqr\n    lower_tail = q1 - 1.5*iqr\n    upper = df[col]>upper_tail\n    lower = df[col]<lower_tail\n    outliers_mask = upper|lower\n    \n    outliers = df.loc[outliers_mask, col]\n    non_outliers = df.loc[~outliers_mask, col]\n    \n    return (outliers, non_outliers)\n\nclass PowerTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self, method='box-cox'):\n        self.method = method\n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X:pd.DataFrame):\n        X = X.copy()\n        for col in X.columns:\n            method = self.method\n            if sum(X[col]<=0)>0:\n                print(f'PowerTransformer: The column {col} contains non-positive values. Falling back to Yeo-Johnson Transform')\n                method='yeo-johnson'\n            X[col] = power_transform(X[[col]], method=method)\n        return X\n\nclass MeanTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self, trim=0.1):\n        self.trim = trim\n\n    def trimmed_mean(self, seq:np.array, trim=0.1):\n        ss = sorted(seq)\n        n = len(ss)\n        trim_cnt = int(trim*n)\n        return np.mean(ss[trim_cnt:-trim_cnt])\n    \n    def fit(self, X:pd.DataFrame, y=None):\n        self.impute_col = dict()\n        for col in X.columns:\n            outliers,non_outliers=split_outliers(X,col)\n            self.impute_col[col]=(outliers.index, self.trimmed_mean(non_outliers))\n        return self\n    def transform(self, X:pd.DataFrame):\n        X = X.copy()\n        for col in X.columns:\n            if col in self.impute_col:\n                idx,m=self.impute_col[col]\n                X.loc[idx,col]=m\n        return X\n\n    \n    \npower_transform_cols = [\n    'fixed_acidity',\n    'volatile_acidity',\n    'citric_acid',\n    'residual_sugar'\n]\n\nmean_transform_cols = [\n    'chlorides'\n]\n\npreprocessor = ColumnTransformer(transformers=[\n    ('boxcox', PowerTransformer(), power_transform_cols),\n    ('mean', MeanTransformer(), mean_transform_cols)\n], remainder='passthrough')\n\npipeline = Pipeline(steps=[\n    ('preprocess', preprocessor)\n])\n\npipeline.fit_transform(X,y)","metadata":{"_uuid":"0b2c88bd-11bf-44f2-8921-5bb926e75a75","_cell_guid":"96da01ef-fc24-4b89-86da-ec2fb203e3b0","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-09-12T12:26:50.341986Z","iopub.execute_input":"2024-09-12T12:26:50.342975Z","iopub.status.idle":"2024-09-12T12:26:51.482756Z","shell.execute_reply.started":"2024-09-12T12:26:50.342927Z","shell.execute_reply":"2024-09-12T12:26:51.481771Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"PowerTransformer: The column citric_acid contains non-positive values. Falling back to Yeo-Johnson Transform\n","output_type":"stream"},{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"array([[-4.41315368e-01,  9.81173594e-01, -1.53110932e+00, ...,\n         3.51000000e+00,  5.60000000e-01,  9.40000000e+00],\n       [-1.60840203e-01,  1.77002342e+00, -1.53110932e+00, ...,\n         3.20000000e+00,  6.80000000e-01,  9.80000000e+00],\n       [-1.60840203e-01,  1.25639205e+00, -1.25535866e+00, ...,\n         3.26000000e+00,  6.50000000e-01,  9.80000000e+00],\n       ...,\n       [-1.36257334e+00,  1.99568658e-03, -6.83293826e-01, ...,\n         3.42000000e+00,  7.50000000e-01,  1.10000000e+01],\n       [-1.76746944e+00,  7.16153892e-01, -7.43826364e-01, ...,\n         3.57000000e+00,  7.10000000e-01,  1.02000000e+01],\n       [-1.66203021e+00, -1.30743403e+00,  1.03107021e+00, ...,\n         3.39000000e+00,  6.60000000e-01,  1.10000000e+01]])"},"metadata":{}}]}]}